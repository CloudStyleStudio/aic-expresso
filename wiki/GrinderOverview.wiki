#summary Grinder Overview

Java programmers can use the _expresso_ and _brewer_ packages to represent and construct expressions, and then use them any way they like, as any other type of Java objects. One possible way of using them is in a [http://en.wikipedia.org/wiki/Rewriting rewriting system], in which expressions (and parts of expressions) are iteratively rewritten until no further rewriting is possible (not unlike the way people sometimes work out expressions in informal mathematics). The _grinder_ pacakge provides support for this kind of use.

The way grinder operates is simple. A rewriter can be seen as a function mapping each expression into another, possibly itself (this latter case is interpreted as the rewriter "not applying" to that expression). Grinder takes one rewriter and one expression, and applies the rewriter to the expression, returning the result.

Naturally, it is more common to successively apply several rewriters to an expression. This can be done by using an "aggregation" rewriter called `RewriteOnce`. This rewriter is based on a sorted list of other rewriters. From the first one on, it tries to apply each rewriter to the expression and sub-expressions of the expression, top-down and depth-first. If a rewriter succeeds, `RewriteOnce` substitutes the result for the original rewritten sub-expression, and returns the overall, new expression with the rewritten sub-expression. 

`RewriteOnce`, as the name indicates, does a single rewriting. If we wish to keep applying a list of rewriters to an expression until no more rewritings are possible, we can use a rewriter called `ExhaustiveRewriter`. An exhaustive rewriter takes some other rewriter (typically a `RewriteOnce` rewriter containing a list of rewriters) and keeps applying it until no more rewritings are done. Similarly, `TotalRewriter` exhaustively rewrites an expression until no more rewriting is possible but instead takes a list of rewriters to apply (this is essentially an optimized version of the `ExhaustiveRewriter` and `RewriteOnce` rewrite mechanism, as it reduces the overhead needed in between each individual rewrite call).



   