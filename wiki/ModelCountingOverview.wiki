#summary Model Counting Overview

=Overview=
TODO

  * Braz, Saadati, Bui, O'Reilly: [http://code.google.com/p/aic-expresso/source/browse/wiki/docs/LiftedArbitraryConstraintSolvingForLiftedProbabilisticInference.pdf Lifted Arbitrary Constraint Solving for Lifted Probabilistic Inference]. In: [http://tsi.wfubmc.edu/labs/strait/StaRAI/starai.html 2nd International Workshop on Statistical Relational AI]. (2012)

== Pseudo-Code for Computing the Cardinallity of a Set ==
Let `L` be a language with no function symbols and a single predicate representing equality, but it may have distinct constant symbols. Let `F` be a quantifier formula in `L`. Let
    <wiki:gadget url="http://mathml-gadget.googlecode.com/svn/trunk/mathml-gadget.xml" border="0" up_content="|F|_{x_1, ..., x_n}" height="25"/> 

denote the cardinality of the set: 

    <wiki:gadget url="http://mathml-gadget.googlecode.com/svn/trunk/mathml-gadget.xml" border="0" up_content="{(x1, ..., xn) | F}_{x_1, ..., x_n}" height="25"/>

We shall define a series of rewriters to compute: 

    <wiki:gadget url="http://mathml-gadget.googlecode.com/svn/trunk/mathml-gadget.xml" border="0" up_content="|F|_{x_1, ..., x_n}" height="25"/>

We need the following definition for our process.

Definition:  An expression `E` is Easily Summable `(ES)` with respect to variables x,,1,,,...,x,,n,, iff it has one of the following forms:
  * `E` is some constant `c`.
  * `E` is a variable other than x,,1,,,...,x,,n,,
  * `E` is of the form "if C then t,,1,, else t,,2,," where t,,1,, and t,,2,, are `ES` with respect to x,,1,,,...,x,,n,, and `C` is a quantifier-free formaula in `L`.
  * `E` is of the form f(t,,1,,, ..., t,,n,,) where t,,1,,,...,t,,n,, are `ES` with respect to x,,1,,,...,x,,n,,.

For a set of index variables `X`, `||X||` denotes the project of the cardinalities of domain sizes of index variables in `X`. For instance, if `X = {x, y}`, then 
    <wiki:gadget url="http://mathml-gadget.googlecode.com/svn/trunk/mathml-gadget.xml" border="0" up_content="||X|| = |type(X)| xx |type(Y)|" height="25"/>


===List of Cardinality Rewriters===
  * [RewriterCard R_card(| F |_{x1, ..., xn})] 
  * [RewriterCardWithQuantification R_card( | F |_X, quantification )]
  * [RewriterSumOverOneVariable R_sum_over_one_variable(sum_{x: Cx} S)]
  * [RewriterCardConjunction R_card_conjunction( | F |_X, quantification )]
  * [RewriterEqualityInConjunction R_equality_in_conjunction(| x_i = t and Phi |_X, quantification)]
  * [RewriterCardConjunctionOfDisequalities R_card_conjunction_of_disequalities(| F |_X, quantification)]
  * [RewriterCardDisjunction R_card_disjunction(| F |_X, quantification)]
  * [RewriterCardImplication R_card_implication(| F |_X, quantification)]
  * [RewriterCardEquivalence R_card_equivalence(| F |_X, quantification)]
  * [RewriterTopSimplify R_top_simplify(F)]
  * [RewriterTopSimplifyDisjunction R_top_simplify_disjunction(F1 or ... or Fn)]
  * [RewriterTopSimplifyConjunction R_top_simplify_conjunction(F1 and ... and Fn)]
  * [RewriterMoveNotIn R_move_not_in(F)]
  * [RewriterTopQuantifierElimination R_top_quantifier_elimination(Qx F)]
  * [RewriterQuantifierElimination R_quantifier_elimination(F)]
  * [RewriterCardExtensionalSet R_cardExtensionalSet( | {t1,...,tn} | )]
  * [RewriterSimplify R_simplify(F)]

===List of Cardinality Support Functions===
  * [FunctionNegationHasLessNumberOfDisjuncts negationHasLessNumberOfDisjuncts(F)]
  * [FunctionPickCheapest pick_cheapest( Candidates )]
  * [FunctionSortPair sort_pair(F1, F2)]
  * [FunctionReplaceConjunctAndTopSimplify replace_conjunct_and_top_simplify(F, i, F1 and ... and Fn)]
  * [FunctionAddConjunctAndTopSimplify add_conjunct_and_top_simplify(F, F1 and ... and Fn)]
  * [FunctionReplaceDisjunctAndTopSimplify replace_disjunct_and_top_simplify(F, i, F1 or ... or Fn)]
  * [FunctionAddDisjunctAndTopSimplify add_disjunct_and_top_simplify(F, F1 or ... or Fn)]
  * [FunctionIsContradiction is_contradiction(F)]
  * [FunctionIsTautology is_tautology(F)]
  * [FunctionIncompleteLinearImplies incomplete_linear_implies(G, H)]
  * [FunctionPlusOne plusOne(N)]
  * [FunctionWorstCaseNumberOfDisjuncts worstCaseNumberOfDisjuncts(F)]
  * [FunctionWorstCaseNumberOfDisjunctsWithSign worstCaseNumberOfDisjuncts(F, sign)]