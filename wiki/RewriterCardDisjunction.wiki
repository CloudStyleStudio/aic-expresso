#summary R_card_disjunction(| F |_X, quantification)
R_card_disjunction(| F |,,X,,, quantification) - ([http://code.google.com/p/aic-expresso/source/browse/trunk/src/main/java/com/sri/ai/grinder/library/equality/cardinality/direct/core/CardinalityDisjunction.java implementation])
<pre>
inputs: F is a disjunction.
        "quantification" is either "there exists", "for all", or "none".
return: a basic expression equivalent to | F |_X, if quantification is "none".
        If quantification is "for all", returns a counting-solution, the leaves 
            of which may differ from the exact one in the following way: 
            when the exact one is not ||X||, it may be any value but ||X||.
        If quantification is "there exists", returns a counting-solution, the leaves 
            of which may differ from the exact one in the following way: 
            when the exact one is not 0, it may be any value but 0.
</pre>
| `if F is a disjunction which can be partitioned into a few subproblems`<br>
| `such that F can be partitioned into D, D`,,1,,`, and D`,,2,,`; where I`,,1,,` and I`,,2,,` are`<br> 
| `two partitions of the indices in X, and the index variables in D`,,1,,` and D`,,2,,<br>
| `are I`,,1,,` and I`,,2,,` respectively, and D is independent of X. Either D or D`,,2,,` may be empty.`<br>
|.... `D`,,1,,` = `[RewriterTopSimplify R_top_simplify]`(D`,,1,,`)`<br>
|.... `if D`,,2,,` is empty:`<br>
|........ `R <- `[RewriterCardWithQuantification R_card]`(| D`,,1,,` |`,,X,,`, quantification)`<br>
|.... `else`<br>
|........ `D`,,2,,` = `[RewriterTopSimplify R_top_simplify]`(D`,,2,,`)`<br>
|........ `R <- `[RewriterSimplify R_normalize]`(`[RewriterCardWithQuantification R_card]`(|D`,,1,,`|`,,I1,,`, quantification)*||I`,,2,,`|| +`<br>
|............ [RewriterCardWithQuantification R_card]`(|D`,,2,,`|`,,I2,,`, quantification)*||I`,,1,,`|| -`<br>
|............ [RewriterCardWithQuantification R_card]`(|D`,,1,,`|`,,I1,,`, quantification)* `[RewriterCardWithQuantification R_card]`(|D`,,2,,`|`,,I2,,`, quantification))`<br>
|.... `if D is empty:`<br>
|........ `return R`<br>
|.... `else`<br>
|........ `return `[RewriterSimplify R_normalize]`(if D then ||X|| else R)`<br>
|<br>
| // Assume F is of the form F1 or F2<br>
| // | F1 or F2 |,,X,, = | F1 |,,X,, + | F2 |,,X,, - | F1 and F2 |,,X,,<br>
| // but we do not compute it like that, see below for optimized version.<br>
|<br>
| `(F1, F2) <- split_disjuncts_on_X(F) as follows:`<br>
| `if F1 contains all the disjuncts independent of X (not empty)`<br>
|.... `return `[RewriterSimplify R_normalize]`(if F1 then ||X|| else R_card(|F2|`,,X,,`, quantification))`<br>
|<br>
| `otherwise (if all disjuncts of F have some index variable occurring in them):`<br>
| `F1 <- first disjunct in F`<br>
| `F2 <- remaining disjuncts in F`<br>
|<br>
| `F1 <- `[RewriterTopSimplify R_top_simplify]`(F1)`<br>
| `F2 <- `[RewriterTopSimplify R_top_simplify]`(F2)`<br>
|<br>
| `if quantification is "for all"`<br>
|.... `return `[RewriterSimplify R_normalize]`(`<br>
|........ `if `[RewriterCardWithQuantification R_card]`(| `[RewriterTopSimplifyConjunction R_top_simplify_conjunction]`(not F1 and not F2) |`,,X,,`, "there exists") > 0`<br>
|........ `then 0 else ||X||)`<br>
|<br>
| `(F1, F2) <- `[FunctionSortPair sort_pair]`(F1, F2)`<br>
|<br> 
| `N1 <- `[RewriterCardWithQuantification R_card]`(| F1 |`,,X,,`, quantification)`<br>
| `if N1 = 0`<br>
|.... `return `[RewriterCardWithQuantification R_card]`(| F2 |`,,X,,`, quantification)` // | F1 and F2 |,,X,, is 0<br>
| `if N1 = ||X||`<br>
|.... `return ||X||` // | F2 |,,X,, = | F1 and F2 |,,X,, and cancel out<br>
|<br>
| `N2 <- `[RewriterCardWithQuantification R_card]`(| F2 |`,,X,,`, quantification)`<br>
| `if N2 = 0`<br>
|.... `return N1` // | F1 and F2 |,,X,, is 0<br>
| `if N2 = ||X||`<br>
|.... `return ||X||` // N1 = | F1 |,,X,, = | F1 and F2 |,,X,, and cancel out<br>
|<br>
| `if quantification is "there exists"`<br>
|.... // there is no need to compute N3, since it is enough that there is x in for either F1 or F2<br>
|.... `return `[RewriterSimplify R_normalize]`(if N1 > 0 or N2 > 0 then ||X|| else 0)`<br>
|<br>
| // quantification is guaranteed to be "none" because otherwise it would have returned by now<br>
| `N3 <- `[RewriterCardWithQuantification R_card]`( | `[RewriterTopSimplifyConjunction R_top_simplify_conjunction]`(F1 and F2) |`,,X,,`, "none" )`<br>
| `return `[RewriterSimplify R_normalize]`(N1 + N2 - N3)`<br>
| // possible further optimization since F1 and F2 are already top-simplified<br>