#summary pick_cheapest( Candidates )
pick_cheapest( Candidates )<br>
| // cost of an expression is its size times the number of disjunctive operators in it<br>
| // or, => and <=> are disjunctive operators<br>
| // implementation note: when picking the smallest F,,i,,, down-recurse all candidates in parallel<br>
| // keeping the lower bound (accumulated cost so far) for each of them. Stop when you have the<br>
| // final cost of a candidate and it is cheaper than the lower bounds of all others. This will avoid<br>
| // having to recurse down all of them till the end.<br>