#summary R_top_simplify_conjunction(F1 and ... and Fn)
R_top_simplify_conjunction(F1 and ... and Fn)
<pre>
inputs: Each Fi is any formula.
return: simplification of top level of conjunction.
</pre>
| `T <- empty tuple` // T will contain conjuncts of F not equal to True or False<br>
| `for all i`<br>
|.... `if F`,,i,,` is False or Alpha != Alpha`<br>
|........ `return False`<br>
|.... `if F`,,i,,` is not "True" and F`,,i,,` is not Alpha = Alpha`<br>
|........ `add F`,,i,,` to T`<br>
|<br> 
| `T' <- empty tuple` // T' will contain the elements of T that are needed in the final conjunction<br>
| `irrelevant <- empty set`<br>
| `for all i in 1,..., |T|`<br>
|.... `if T`,,i,,` is in irrelevant`<br>
|........ `continue to next i`<br>
|.... `i_is_irrelevant <- false`<br>
|.... `for all j in i + 1, ..., |T|`<br>
|........ `if `[FunctionIncompleteLinearImplies incomplete_linear_implies]`(T`,,j,,`, T`,,i,,`)`<br>
|............ `i_is_irrelevant <- true`<br>
|............ `continue to next i`<br>
|........ `if [FunctionIncompleteLinearImplies incomplete_linear_implies]`(T`,,i,,`, T`,,j,,`)`<br>
|............ `irrelevant <- irrelevant union { T`,,j,,` }`<br>
|........ `else if `[FunctionIncompleteLinearImplies incomplete_linear_implies]`(T`,,i,,`, not T`,,j,,`) or `[FunctionIncompleteLinearImplies incomplete_linear_implies]`(T`,,j,,`, not T`,,i,,`)`<br>
|............ `return False` // conjunction is contradiction<br>
|.... `if not i_is_irrelevant`<br>
|........ `add T`,,i,,` to T'`<br>
|<br> 
| `return conjunction on elements of T'`<br>