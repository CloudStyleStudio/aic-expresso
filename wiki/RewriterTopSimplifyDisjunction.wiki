#summary R_top_simplify_disjunction(F1 or ... or Fn)
R_top_simplify_disjunction(F1 or ... or Fn) - ([http://code.google.com/p/aic-expresso/source/browse/trunk/src/main/java/com/sri/ai/grinder/library/equality/cardinality/direct/core/TopSimplifyDisjunction.java implementation])
<pre>
inputs: Each Fi is any formula.
return: simplification of top level disjunction.
</pre>
| `T <- empty tuple` // T will contain disjuncts of F not equal to True or False<br>
| `for all i`<br>
|.... `if F`,,i,,` is True or Alpha = Alpha`<br>
|........ `return True`<br>
|.... `if F`,,i,,` is not "False" and F`,,i,,` is not Alpha != Alpha`<br>
|........ `add F`,,i,,` to T`<br>
|<br>
| `T' <- empty tuple` // T' will contain the elements of T that are needed in the final disjunction<br>
| `irrelevant <- empty set`<br>
| `for all i in 1, ..., |T|`<br>
|.... `if T`,,i,,` is in irrelevant`<br>
|........ `continue to next i`<br>
|.... `i_is_irrelevant <- false`<br>
|.... `for all j in i + 1, ..., |T|`<br>
|........ `if `[FunctionIncompleteLinearImplies incomplete_linear_implies]`(T`,,i,,`, T`,,j,,`)`<br>
|............ `i_is_irrelevant <- true`<br>
|............ `continue to next i`<br>
|........ `if `[FunctionIncompleteLinearImplies incomplete_linear_implies]`(T`,,j,,`, T`,,i,,`)`<br>
|............ `irrelevant <- irrelevant union { T`,,j,,` }`<br>
|........ `else if `[FunctionIncompleteLinearImplies incomplete_linear_implies]`(not T`,,i,,`, T`,,j,,`) or `[FunctionIncompleteLinearImplies incomplete_linear_implies]`(not T`,,j,,`, T`,,i,,`)`<br>
|............ `return True` // disjunction is tautology<br>
|.... `if not i_is_irrelevant`<br>
|........ `add T`,,i,,` to T'`<br>
|<br>
| `return disjunction of elements of T'`<br>