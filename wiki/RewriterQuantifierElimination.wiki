#summary R_quantifier_elimination(F)
R_quantifier_elimination(F) - ([http://code.google.com/p/aic-expresso/source/browse/trunk/src/main/java/com/sri/ai/grinder/library/equality/cardinality/direct/core/QuantifierElimination.java implementation])
<pre>
inputs: F is any formula. 
return: a quantifier-free formula equivalent to F
</pre>
| `if F is "for all x: Y"`<br>
|.... `return `[RewriterSimplify R_simplify]`(`[RewriterCardWithQuantification R_card]`(|`[RewriterTopSimplify R_top_simplify]`(Y)|`,,X,,`, "for all") = |type(x)| )`<br>
| `if F is "there exists x: Y"`<br>
|.... `return `[RewriterSimplify R_simplify]`(`[RewriterCardWithQuantification R_card]`(|`[RewriterTopSimplify R_top_simplify]`(Y)|`,,X,,`, "there exists") > 0)`<br>
| `if F is "not G"`<br>
|.... `return `[RewriterQuantifierElimination R_quantifier_elimination]`(`[RewriterMoveNotIn R_move_not_in]`(not G))`<br>
| `if F is G => H`<br>
|.... `return `[RewriterQuantifierElimination R_quantifier_elimination]`(`[RewriterTopSimplifyDisjunction R_top_simplify_disjunction]`(not G or H))`<br>
| `if F is G <=> H`<br>
|.... `return `[RewriterQuantifierElimination R_quantifier_elimination]`(`[RewriterTopSimplifyConjunction R_top_simplify_conjunction]`((not G or H) and (G or not H)))`<br>
| `if F is a conjunction F`,,1,,` and ... and F`,,n,,<br>
|.... `F' <- True`<br>
|.... `i <- 1`<br>
|.... `while F' is not "False" and i <= n`<br>
|........ `G`,,i,,` <- `[RewriterQuantifierElimination R_quantifier_elimination]`(F`,,i,,`)`<br>
|........ `F' <- `[FunctionAddConjunctAndTopSimplify add_conjunct_and_top_simplify]`(G`,,i,,`, F')`<br>
|........ `i <- i + 1`<br>
|.... `return F'`<br>
| `if F is a disjunction F`,,1,,` or ... or F`,,n,,<br>
|.... `F' <- False`<br>
|.... `i <- 1`<br>
|.... `while F' is not "True" and i <= n`<br>
|........ `G`,,i,,` <- `[RewriterQuantifierElimination R_quantifier_elimination]`(F`,,i,,`)`<br>
|........ `F' <- `[FunctionAddDisjunctAndTopSimplify add_disjunct_and_top_simplify]`(G`,,i,,`, F')`<br>
|........ `i <- i + 1`<br>
|.... `return F'`<br>
| `return F`<br>