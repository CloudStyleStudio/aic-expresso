#summary R_card( | F |_X, quantification )
R_card( | F |,,X,,, quantification )
<pre>
inputs: F is any top-simplified formula.
        quantification is "none", "for all", or "there exists".
return: a basic expression equivalent to | F |_X, if quantification is "none".
        If quantification is "for all", returns a counting-solution, the leaves 
            of which may differ from the exact one in the following way: 
            when the exact one is not ||X||, it may be any value but ||X||.
        If quantification is "there exists", returns a counting-solution, the leaves 
            of which may differ from the exact one in the following way: 
            when the exact one is not 0, it may be any value but 0.
</pre>
`if F is True`<br>
<span style="padding-left:20px"></span>`return `[RewriterSimplify R_simplify]`(||X||)`

`if F is False`
    `return 0`

`if x does not occur in F for any x in X`
    `return `[RewriterSimplify R_simplify]`(if F then ||X|| else 0)`

`if F is a conjunction // including F being a literal or a multi-equality`
    `return `[RewriterCardConjunction R_card_conjunction]`(|F|`,,X,,`, quantification)`

`if F is disjunction`
    `return `[RewriterCardDisjunction R_card_disjunction]`(| F |`,,X,,`, quantification)`

`if F is "not G"`
    `F' <- `[RewriterTopSimplify R_top_simplify]`(`[RewriterMoveNotIn R_move_not_in]`(F))`<br>
    `return `[RewriterCardWithQuantification R_card]`(| F' |`,,X,,`, quantification)`

`if F is an implication of the form G => H`
    `return `[RewriterCardImplication R_card_implication]`( | F |`,,X,,`, quantification)`

`if F is an equivalence of the form G <=> H`
    `return `[RewriterCardEquivalence R_card_equivalence]`( | F |`,,X,,`, quantification)`

`if F is Q y : G`
    `return `[RewriterCardWithQuantification R_card]`( | `[RewriterTopQuantifierElimination R_top_quantifier_elimination]`(Q y : G) |`,,X,,`, quantification)`